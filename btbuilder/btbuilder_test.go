package btbuilder

import (
	"fmt"
	"reflect"
	"testing"
)

func TestBuildTree(t *testing.T) {
	stringmap := map[string][][]rune{
		"": nil,
		"1": {
			{'1'},
		},
		"11": {
			{'1', '1'},
		},
		"111": {
			{'1', '1', '1'},
		},
		"abcdefghijklmn": {
			{'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'},
		},
		//aaaa,bbbb,cccccc
		"aaaa,bbbb,cccccc": {
			{' ', ' ', ' ', 'a', 'a', 'a', 'a', ' ', ' ', ' ', ' ', ' '},
			{' ', ' ', ' ', ' ', '/', ' ', '\\', ' ', ' ', ' ', ' ', ' '},
			{' ', ' ', ' ', '/', ' ', ' ', ' ', '\\', ' ', ' ', ' ', ' '},
			{' ', ' ', '/', ' ', ' ', ' ', ' ', ' ', '\\', ' ', ' ', ' '},
			{'b', 'b', 'b', 'b', ' ', ' ', 'c', 'c', 'c', 'c', 'c', 'c'},
		},
		//1,#,2,#,#,3,4
		"1,#,2,#,#,3,4": {
			{'1', ' ', ' '},
			{' ', '\\', ' '},
			{' ', ' ', '2'},
		},
		//1,2,3,4,5,#,#,6,7,8,1,#,#,#,#,#,#,2,3,4,5,6,7,8,9,10,11,12,13,14,15
		"1,2,3,4,5,#,#,6,7,8,1,#,#,#,#,#,#,2,3,4,5,6,7,8,9,10,11,12,13,14,15": {
			{' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '1', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
			{' ', ' ', ' ', ' ', ' ', ' ', ' ', '/', ' ', '\\', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
			{' ', ' ', ' ', ' ', ' ', ' ', '2', ' ', ' ', ' ', '3', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
			{' ', ' ', ' ', ' ', ' ', '/', ' ', '\\', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
			{' ', ' ', ' ', ' ', '/', ' ', ' ', ' ', '\\', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
			{' ', ' ', ' ', '4', ' ', ' ', ' ', ' ', ' ', '5', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
			{' ', ' ', '/', ' ', '\\', ' ', ' ', ' ', '/', ' ', '\\', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
			{' ', '6', ' ', ' ', ' ', '7', ' ', '8', ' ', ' ', ' ', '1', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
			{' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '/', ' ', '\\', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
			{' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '/', ' ', ' ', ' ', '\\', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
			{' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '/', ' ', ' ', ' ', ' ', ' ', '\\', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
			{' ', ' ', ' ', ' ', ' ', ' ', ' ', '/', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\\', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
			{' ', ' ', ' ', ' ', ' ', ' ', '/', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '\\', ' ', ' ', ' ', ' ', ' ', ' '},
			{' ', ' ', ' ', ' ', ' ', '2', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '3', ' ', ' ', ' ', ' ', ' '},
			{' ', ' ', ' ', ' ', '/', ' ', '\\', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '/', ' ', '\\', ' ', ' ', ' ', ' '},
			{' ', ' ', ' ', '/', ' ', ' ', ' ', '\\', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '/', ' ', ' ', ' ', '\\', ' ', ' ', ' '},
			{' ', ' ', '4', ' ', ' ', ' ', ' ', ' ', '5', ' ', ' ', ' ', ' ', ' ', '6', ' ', ' ', ' ', ' ', ' ', '7', ' ', ' '},
			{' ', '/', ' ', '\\', ' ', ' ', ' ', '/', ' ', '\\', ' ', ' ', ' ', '/', ' ', '\\', ' ', ' ', ' ', '/', ' ', '\\', ' '},
			{'8', ' ', ' ', ' ', '9', ' ', '1', '0', ' ', '1', '1', ' ', '1', '2', ' ', '1', '3', ' ', '1', '4', ' ', '1', '5'},
		},
	}

	t.Run("stringTest", func(t *testing.T) {
		for k, v := range stringmap {
			result, _ := BuildTree(k)
			if !reflect.DeepEqual(v, result) {
				t.Fatal("Result is ", result, ". But expected is ", v)
			}
		}
	})
	fmt.Println()
}
